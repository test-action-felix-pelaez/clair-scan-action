name: "Clair Scan"
description: "Image Vulnerability Scan"

inputs:
  image:
    description: 'Container image to scan'
    required: true
  local:
    description: 'It tells if the container image is deployed localy or remote. Values: yes | no'
    required: false
    default: 'yes'
  report_format:
    description: 'Report format. Values: xml | json | text'
    required: false
    default: 'json'
  report_path:
    description: 'Path to save the report'
    required: true
  clair_timeout:
    description: 'Establish the timeout in seconds while waiting for Clair to be ready, useful for slower runners'
    required: false
    default: 120
  updater:
    description: 'Set Updater E.G. debian'
    required: true
runs:
  using: "composite"
  steps:
    - env:
        INPUT_IMAGE: ${{ inputs.image }}
        INPUT_LOCAL: ${{ inputs.local }}
        INPUT_REPORT_FORMAT: ${{ inputs.report_format }}
        INPUT_REPORT_PATH: ${{ inputs.report_path }}
        INPUT_CLAIR_TIMEOUT: ${{ inputs.clair_timeout }}
        INPUT_UPDATER: ${{ inputs.updater }}
      run: |
        sed -i "s/SET_UPDATER/${INPUT_UPDATER}/g" $GITHUB_ACTION_PATH/config.yaml
        chmod +x $GITHUB_ACTION_PATH/run.sh && $GITHUB_ACTION_PATH/run.sh "${INPUT_CLAIR_TIMEOUT}"
        if [[ "${INPUT_LOCAL}" != "yes" ]]; then \
          docker pull ${INPUT_IMAGE}
        fi
        docker tag ${INPUT_IMAGE} localhost:5000/${INPUT_IMAGE} && docker push localhost:5000/${INPUT_IMAGE}
        docker exec clair clairctl -D report -o ${INPUT_REPORT_FORMAT} localhost:5000/${INPUT_IMAGE} > "${INPUT_REPORT_PATH}"
      shell: bash
